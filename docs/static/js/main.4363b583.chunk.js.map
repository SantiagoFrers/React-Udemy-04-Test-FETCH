{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","setTimeout","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAsCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,cAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAiBvC,OACI,mCACI,sBAAMC,SAbO,SAAAC,GACjBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAChCR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OAGrCN,EAAc,MAMV,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBU,SAAAP,GAAC,OAAIF,EAAcE,EAAEQ,OAAOF,e,+BCP7CG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARtB,kBAYZM,GAZY,4CAAH,sDC2BLO,EAxBM,SAACf,GAAc,IAAD,EAETd,mBAAS,CAC/BqB,KAAK,GACLS,SAAS,IAJsB,mBAE5BC,EAF4B,KAErBC,EAFqB,KAoBnC,OAbAC,qBAAW,WACPpB,EAAQC,GACHoB,MAAM,SAAAC,GAEHC,YAAY,WACRJ,EAAS,CACLX,KAAMc,EACNL,SAAS,MAEd,UAEZ,CAAChB,IAEGiB,GCXQM,EAZK,SAAC,GAAuB,EAArBZ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAI9B,OACI,sBAAKsB,UAAU,2CAAf,UACA,qBAAKC,IAAKvB,EAAKwB,IAAKd,IACpB,4BAAIA,QCwBGe,EA5BC,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAAe,EAEFe,EAAaf,GAAhCa,EAFqB,EAE3BN,KAAcS,EAFa,EAEbA,QAIrB,OACQ,qCACA,oBAAIQ,UAAU,sCAAd,SAAqDxB,IAEpDgB,GAAW,mBAAGQ,UAAU,mCAAb,qBAIZ,qBAAKA,UAAU,YAAf,SAEYX,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aCqBlBiB,EArCM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,iBAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAUvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACQ,6BAEQ4C,EAAWpB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCpBrC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4363b583.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputvalue] = useState('Hola Mundo') // Si quiero que no diga nada debo enviar un string vacia '', si lo dejo () sera undefined y pincha\r\n    const handleInputChange = e => setInputvalue(e.target.value); // Capturo el valor puesto\r\n    \r\n    //Cuando hagan submit cortamos el formulario para que no haga refresh\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        if ( inputValue.trim().length > 2) {\r\n        setCategories(cats=> [inputValue, ...cats]);\r\n        // Lo ponemos con un callback ya que no tenemos acceso al estado inicial. Si quiesieramos tener acceso deberiamos enviar por las props categories y traerlo aqui\r\n        //Usamos inputValue ya que una vez que lo modificamos con el setInputValue, se vuelve el inicial.\r\n        setInputvalue(''); //Una vez que cargamos un valor deja el input vacio\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type=\"text\"\r\n                    value={inputValue} // El primer valor que mostrara\r\n                    onChange={ handleInputChange }\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n    }\r\n\r\nexport default AddCategory\r\n","export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=UqYuZAHDgvPVcwCnYpPEThorcf4ZOpkV&q=${encodeURI(category)}&limit=10`\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json()\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import {useEffect, useState} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\nconst [state, setstate] = useState({\r\n    data:[],\r\n    loading: true\r\n});\r\n\r\nuseEffect( ()=> { //se ejecuta la 1ยบ vez\r\n    getGifs(category) // busca getGits con las categorias que existan\r\n        .then( imgs => {\r\n            // agregamos 3 segundos para poder ver el \"Cargando\"\r\n            setTimeout( () =>{\r\n                setstate({ \r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            }, 1000);\r\n        })\r\n}, [category])\r\n\r\nreturn state\r\n\r\n}\r\n\r\nexport default useFetchGifs\r\n","const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    //console.log(id, title, url);\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInUp'>\r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import useFetchGifs from \"../hooks/useFetchGifs\"\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ( {category} ) => {\r\n\r\nconst {data: images, loading} = useFetchGifs(category);\r\n\r\n\r\n\r\nreturn (\r\n        <>\r\n        <h3 className='animate__animated animate__fadeInUp'>{category}</h3>\r\n\r\n        {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n        {/* Otra forma de escribirlo\r\n        {loading ? <p>Loading</p> : null} */}\r\n\r\n        <div className='card-grid'>\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                        /> /* De esta manera enviamos cada item del objeto como props */\r\n                     ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid","import { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Thunder Cats'])\r\n    //UseState desestructurado\r\n\r\n/*     const handleAdd = () => {\r\n        setCategories([...categories, 'El laboratorio de Dexter'])\r\n        //setCategories(cats=> [...cats, 'El laboratorio de Dexter']) es otra forma de agregar\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n                    <ol>\r\n                        {\r\n                            categories.map( (category) =>(\r\n                                <GifGrid \r\n                                key={category}\r\n                                category={category} />\r\n                            ))\r\n                        }\r\n                    </ol>\r\n\r\n{/* El boton se uso para insertar valores, se comenta porque empezamos a usar el componente AddCategory */}\r\n            {/* <button onClick={ handleAdd } >Agregar</button> */}\r\n\r\n{/* Se uso cuando estabamos probando el AddCategory, se comenta para usar el GifGrid */}\r\n{/*             <ol>\r\n                { categories.map( category => <li key={ category }> {category} </li> ) }\r\n            </ol>\r\n */}\r\n        </>\r\n        )\r\n};\r\n\r\nexport default GifExpertApp;","import ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}